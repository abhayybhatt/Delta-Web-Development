/* Let's revise: Block Elements:
1. Take up the full-width available (whole block)
2. Start from new line
and Inline Elements:
1. Take up only necessary width
2. Don't start from new line */

span{
    background-color: lime;
    height: 100px;
    width: 200px;
    /* note: height aur width span ki set hi nhi hoti.  */
    padding: 50px;
    margin: 20px;
    /* point to be noted: padding aur margin dono hi bas left aur right side ke liye set ho rhi hai, not for top and bottom! */

}
/* display property: It sets whether an element is treated as a block or inline element and the */
/* layout used for its children. aur apan kisi bhi inline ko block and block ko inline element bhi bana sakte hai using display:block and display: inline respectively. */
#first{
    background-color: lime;
    height: 100px;
    width: 200px;
    padding: 50px;
    margin: 20px;
}
/* Conclusion? For inline elements -> Margins will work horizontally, but not vertically. Padding works on all sides, but the top and bottom
may overlap other elements.
for block elements -> They will respect width and height CSS properties. Horizontal and vertical margins both work in case of block elements. */

.inline_block{
    height: 200px;
    width: 200px;
    border: 2px solid black;
    margin: 10px;
    background-color: aquamarine;
    /* display:inline-block : Element will be styled as per its block element property, but it will behave as an inline element. jab block elements ko single line mein laana hai pr ye bhi ensure krna hai ki unki css styling aisa krne se change na ho, tab ise use krna. */
    display: inline-block;
}
#third{
    /* agr kisi element ko thode time ke liye hidden rakhna hai apne webpage mein, ya fir in other words kisi element ko udaana hai webpage se, then use display: none; */
    display: none;
}

/* Percentages (%)
It is often used to define a size as relative to an element's parent object. */
h1{
    border: 2px solid black;
    width: 50%; /* matlab iske parent element(body) ne jitni width occupy kri hai(100% in this case), uska 50% width ye occupy krega.*/
}
#outer{
    height: 400px;
    width: 400px;
    border: 2px solid black;
    background-color: seashell;

}
#inner{
    height: 100px;
    width: 100px;
    background-color: cornflowerblue;
    border: 2px solid black;
    margin: 10%; /*means 10% of parent element's height or width. yaani 40px in this case.*/
}

/* Em(pronounced as "M"): Relative to 1. Font size of the parent, in the case of typographical(text-based) properties like
font-size, and  2. font size of the element itself, in the case of other properties like Width. */

#outer2{
    height: 400px;
    width: 400px;
    border: 2px solid black;
    background-color: azure;
    font-size: 20px;
}
#inner2{
    height: 100px;
    width: 100px;
    border: 2px solid black;
    background-color: cornflowerblue;
    font-size: 0.5em; /*em is relative to font size of parent, in case of text-based properties. 0.5 times of parent element's font size, yaani 10px.*/
    padding: 1em; /*em is realtive to the font size of the element itself here, yaani jitna iska font size hai, uske relation mein utni set hogi padding.*/
}

/* however, there's a problem with em: Drawback of Em -> Snowball effect in nested elements. */

div{
    font-size: 2em; /*section ke font size ka double div1, div1 ka double div2 and div2 ka double div3. This is the snowball effect. jab ooche pahad se snowball girti hai to wo bahut chhoti hoti hai. lekin neeche girte-girte wo snowball kaafi badi ho jaati hai, hence the name Snowball effect is used here.*/

    /* Rem(Root element): this relative unit is used to avoid the disadvantage of em. It is relative to font-size of the root element. yaani ismein bas root element(section in the above example) ke relative uske baad ke child elements ki size decide hogi. */
}
